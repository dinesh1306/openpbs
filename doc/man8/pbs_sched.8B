.\" Copyright (C) 1994-2018 Altair Engineering, Inc.
.\" For more information, contact Altair at www.altair.com.
.\"
.\" This file is part of the PBS Professional("PBS Pro") software.
.\"
.\" Open Source License Information:
.\"
.\" PBS Pro is free software. You can redistribute it and/or modify it under the
.\" terms of the GNU Affero General Public License as published by the Free
.\" Software Foundation, either version 3 of the License, or (at your option) any
.\" later version.
.\"
.\" PBS Pro is distributed in the hope that it will be useful, but WITHOUT ANY
.\" WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
.\" FOR A PARTICULAR PURPOSE.
.\" See the GNU Affero General Public License for more details.
.\"
.\" You should have received a copy of the GNU Affero General Public License
.\" along with this program.  If not, see <http://www.gnu.org/licenses/>.
.\"
.\" Commercial License Information:
.\"
.\" For a copy of the commercial license terms and conditions,
.\" go to: (http://www.pbspro.com/UserArea/agreement.html)
.\" or contact the Altair Legal Department.
.\"
.\" Altair’s dual-license business model allows companies, individuals, and
.\" organizations to create proprietary derivative works of PBS Pro and
.\" distribute them - whether embedded or bundled with other software -
.\" under a commercial license agreement.
.\"
.\" Use of Altair’s trademarks, including but not limited to "PBS™",
.\" "PBS Professional®", and "PBS Pro™" and Altair’s logos is subject to Altair's
.\" trademark licensing policies.
.\"
.TH pbs_sched 8B "25 October 2013" Local "PBS Professional"
.SH NAME
.B pbs_sched 
\- run the PBS scheduler

.SH SYNOPSIS
.B pbs_sched 
[-a alarm] [-c clientsfile] [-d home] [-L logfile] 
          [-p file] [-S port] [-R port] [-n] [-N]

.B pbs_sched
--version

.SH DESCRIPTION
.B pbs_sched
is the PBS scheduling daemon.  It schedules PBS jobs.
.LP
.B pbs_sched 
must be executed with root permission.

.SH OPTIONS
.IP "-a alarm" 13
.B Deprecated.  
Will overwrite value of 
.I sched_cycle_length
scheduler attribute.
.br
Time in seconds to wait for a scheduling cycle to finish. 
.br
Format: Time, in seconds.
.br

.IP "-c clientsfile" 13
Add clients to the scheduler's list of known clients.
The 
.I clientsfile
contains single-line entries of the form
.RS 17
.I $clienthost <hostname>
.RE
.IP
Each 
.I hostname
is added to the list of hosts allowed to connect to the scheduler.
If 
.I clientsfile
cannot be opened, the scheduler aborts.
Path can be absolute or relative.  If relative, it is relative to
PBS_HOME/sched_priv.

.IP "-d home" 13
The directory in which the scheduler will run.  
.br
Default: PBS_HOME/sched_priv.

.IP "-L logfile" 13
The absolute path and filename of the log file.
The scheduler writes its PBS version and build information to 
the logfile whenever it starts up or 
the logfile is rolled to a new file.  See the 
.I -d 
option.
.br
Default: The scheduler will
open a file named for the current date in the PBS_HOME/sched_logs
directory.  


.IP "-p file" 13
Any output which is written to standard out or standard error will be
written to this file.  The pathname can be absolute or relative, 
in which case it will be relative to PBS_HOME/sched_priv.
See the
.I -d
option.
.br
Default: PBS_HOME/sched_priv/sched_out.

.IP "-S port" 13
The port for the scheduler to use.  If this option is not given,
the default port for the PBS scheduler is taken from PBS_SCHEDULER_SERVICE_PORT, 
in pbs.conf.  
.br
Default: 15004.

.IP "-R port" 13
The port for MOM to use.  If this option is not given,
the port number is taken from PBS_MANAGER_SERVICE_PORT, in pbs.conf.
.br
Default: 15003.

.IP "-n" 13
This will tell the scheduler to not restart itself if it receives a sigsegv or
a sigbus.  The scheduler will by default restart itself if it receives either
of these two signals.  The scheduler will not restart itself if it receives 
either one within five minutes of starting.

.IP "-N" 13
Instructs the scheduler not to detach itself from the current session.
.LP

.IP "--version" 13
The 
.B pbs_sched
command returns its PBS version information and exits.
This option can only be used alone.

.SH CONFIGURATION FILE
The file PBS_HOME/sched_priv/sched_config contains configuration parameters
for the scheduler.  Each entry must be a single unbroken line.
.br
Format: name: value [prime | non-prime | all | none]
.br
where
.IP name 13
Must not contain whitespace.
.IP value 13
Must be double-quoted if it contains whitespace.
.IP "[prime | non-prime | all | none]" 13
Specifies when this setting applies:
during primetime,
non-primetime, or all the time, which is both prime- and non-primetime.
.br
Default: all.
.LP
Any line starting with a hashmark, "#", is a comment, and is ignored.

.B Configuration Parameters
.br
.IP "backfill " 13
If this is set to True, the scheduler attempts to schedule
smaller jobs around higher-priority jobs when using
.I strict_ordering, 
as long as running the smaller jobs won't change the
start time of the jobs they were scheduled around. The scheduler
chooses jobs in the standard order, so other high-priority jobs will be
considered first in the set to fit around the highest-priority job. For
starving jobs, it only has an effect if the parameter
.I help_starving_jobs 
is true. If 
.I backfill 
is False, the
scheduler will idle the system to run starving jobs. Can be used
with 
.I strict_ordering.
.br
Format: Boolean.
.br
Default: true all


.IP "backfill_prime " 13
The Scheduler will not run jobs which would overlap
the boundary between primetime and non-primetime. This assures
that jobs restricted to running in either primetime or non-primetime
can start as soon as the time boundary happens. See also
.I prime_spill, prime_exempt_anytime_queues.
.br
Format: Boolean.
.br
Default: false all

.IP "by_queue " 13
If set to true, all jobs that can be run from the highest-priority
queue are run, then any jobs that can be run from the next queue are
run, and so on.  If
.I sort_queues 
is set to true, queues are ordered highest-priority
first. If 
.I by_queue 
is set to false, all jobs are treated as if
they are in one large queue. The 
.I by_queue 
parameter is overridden
by the 
.I round_robin 
attribute when 
.I round_robin
is set to true. 
.br
Format: Boolean.
.br
Default: true all

.IP cpus_per_ssinode 13
.B Deprecated. 
Such configuration now occurs automatically.

.IP dedicated_prefix 13
Queue names with this prefix will be treated as dedicated
queues, meaning jobs in that queue will only be considered for
execution if the system is in dedicated time as specified in the
configuration file PBS_HOME/sched_priv/dedicated_time. 
.br
Format: string
.br
Default: ded

.IP fair_share 13
Enables the fairshare algorithm, and 
turns on usage collecting. Jobs will be selected based on a
function of their recent usage and priority (shares). 
.br
Format: Boolean.
.br
Default: false all

.IP fairshare_entity 13
Specifies the entity for which fairshare usage data will
be collected. Can be 
.I euser, egroup, Account_Name, queue,
or
.I egroup:euser.
.br
Format: String.
.br
Default: euser.

.IP fairshare_enforce_no_shares 13
If this option is enabled, jobs whose entity has zero
shares will never run. Used with
.I fair_share 
parameter.
.br
Format: Boolean.
.br
Default: false

.IP fairshare_usage_res 13
Specifies the resource to collect and use in fairshare calculations.
.br
Allowable values: Any valid PBS resource, including user-defined resources. 
.br
A special case resource is the exact string
"ncpus*walltime". The number of CPUs used is multiplied by
the walltime in seconds used by the job to determine the usage.
.br
Format: String.
.br
Default: cput.

.IP half_life 13
The half life for fairshare usage: after the amount of time
specified, the fairshare usage is halved. Used with 
.I fair_share.
.br
Format: Time.
.br
Default: 24:00:00

.IP help_starving_jobs 13
Setting this option enables starving job support. Once
jobs have waited for the amount of time given by 
.I max_starve
they are considered starving. If a job is considered starving, then no
lower-priority jobs will run until the starving job can be run, unless
backfilling is also specified. To use this option, the 
.I max_starve
configuration parameter needs to be set as well. See also 
.I backfill, max_starve.
.br
Format: Boolean.
.br
Default: true all

.IP job_sort_key 13
.RS
Selects how the jobs should be sorted. 
.I job_sort_key
can be used to sort either by resources or by special case sorting
routines. Multiple 
.I job_sort_key 
entries can be used, in which
case the first entry will be the primary sort key, the second will be
used to sort equivalent items from the first sort, etc. The 
.I HIGH
option implies descending sorting, 
.I LOW 
implies ascending. See example for details.
This attribute is overridden by the 
.I job_sort_formula 
attribute.
If both are set, 
.I job_sort_key 
is ignored and an error message is
printed.

.br
Syntax: 
.I job_sort_key: PBS_resource HIGH|LOW

.br
There are three special case sorting routines, which can be used
instead of a specific PBS resource:
.RS
.IP "fair_share_perc HIGH" 13
Sort based on the values in the resource group file. This should only
be used if strict priority sorting is needed. Do not enable
.I fair_share_perc 
sorting if using the 
.I fair_share
scheduling option. 

.IP "job_priority HIGH | LOW" 13
Sort jobs by the job 
.I priority 
attribute regardless of job owner. 

.IP "preempt_priority HIGH" 13
Sort jobs by preemption priority. Recommended that this be used when
soft user limits are used. Also recommended that this be the primary
sort key.

.IP "sort_priority HIGH|LOW" 13
.B Deprecated.  
See 
.I job_priority 
above.
.RE

The following example illustrates using resources as a sorting
parameter. Note that for each, you need to specify 
.I HIGH
(descending) or 
.I LOW 
(ascending). Resources must be a quoted string.
.RS
job_sort_key: "ncpus HIGH" all
.br
job_sort_key: "mem LOW" prime
.RE
.br
Format: String.
.br
Default: not in force
.RE

.IP key 13
.B Deprecated. 
Use 
.I job_sort_key.

.IP load_balancing 13
If set, the Scheduler will balance the computational
load of single-host jobs across a complex. The load balancing
takes into consideration the load on each host as well as all
resources specified in the resource list. See
.I smp_cluster_dist.
Load balancing can result in overloaded CPUs.
.br
Format: Boolean.
.br
Default: false all

.IP load_balancing_rr 13
.B Deprecated. 
To duplicate this setting, enable 
.I load_balancing
and 
.I set smp_cluster_dist 
to 
.I round_robin. 


.IP log_filter 13
Defines which event types to keep out of the scheduler
logfile. The value should be set to the bitwise OR of the event
classes which should be filtered. A value of 0 specifies maximum
logging.
.br
Format: Integer.
.br
Default: 3328 

.IP max_starve 13
The amount of time before a job is considered starving. This
variable is used only if 
.I help_starving_jobs 
is set.
.br
Upper limit: None.
.br
Format: Time.
.br
Default: 24:00:00

.IP mem_per_ssinode 13
.B Deprecated. 
Such configuration now occurs automatically.

.IP mom_resources 13
This option is used to query the MOMs to set the value of
.I resources_available.RES 
where 
.I RES 
is a site-defined
resource. Each MOM is queried with the resource name and the
return value is used to replace 
.I resources_available.RES
on that vnode. On a multi-vnoded machine with a natural vnode,
all vnodes will share anything set in 
.I mom_resources.
.br
Format: String.

.IP node_sort_key 13
.RS
Defines sorting on resource or priority values on vnodes. Resource
must be numerical, for example, long or float.
.br
Syntax:
.br
.I node_sort_key: <resource>|sort_priority HIGH|LOW
.br
.I node_sort_key: <resource> HIGH|LOW total|assigned|unused
.RS
.IP total 
Use the 
.I resources_available 
value.
.IP assigned 
Use the 
.I resources_assigned 
value.
.IP unused 
Use the value given by 
.I resources_available - resources_assigned.
.RE
Note that up to 20 
.I node_sort_key entries 
can be used, in which
case the first entry will be the primary sort key, the second will be
used to sort equivalent items from the first sort, etc.
.br
When sorting on a resource, the default third field is "total".
.br
Format: String.
.br
Default: node_sort_key: sort_priority HIGH
.RE

.IP nonprimetime_prefix 13
Queue names which start with this prefix will be treated
as non-primetime queues. Jobs within these queues will only
run during non-primetime. Primetime and non-primetime are
defined in the holidays file. 
.br
Format: String.
.br
Default: np_

.IP peer_queue 13
Defines the mapping of a remote queue to a local queue
for Peer Scheduling. Maximum number is 50 peer queues per
scheduler. 
.br
Format: String.
.br
Default: Unset.

.IP preemptive_sched 13
Enables job preemption.  See
.I preempt_order.
.br
Format: String.
.br
Default: true all

.IP preempt_checkpoint 13
.B Deprecated. 
Add C to 
.I preempt_order 
parameter.

.IP preempt_fairshare 13
.B Deprecated. 
Add fairshare to 
.I preempt_prio 
parameter.

.IP preempt_order 13
.RS
Defines the order of preemption methods which the
Scheduler will use on jobs. This order can change depending on
the percentage of time remaining on the job. The ordering can
be any combination of 
.I S C 
and 
.I R.
.RS
.IP S 
Suspend
.IP C
Checkpoint
.IP R
Requeue
.RE
The usage is an ordering (SCR) optionally followed
by a percentage of time remaining and another ordering. Note,
this has to be a quoted list("").
.RS
preempt_order: "SR"
.br
preempt_order: "SCR 80 SC 50 S"
.RE
The first example above specifies that PBS should first attempt
to use suspension to preempt a job, and if that is unsuccessful,
then requeue the job. The second example says if the job has
between 100-810f requested time remaining, first try to suspend
the job, then try checkpoint, then requeue. If the job has
between 80-510f requested time remaining, then attempt suspend,
then checkpoint; and between 50% and 0% time remaining
just attempt to suspend the job.
.br
Format: Quoted list.
.br
Default: SCR
.RE

.IP preempt_prio 13
.RS
Specifies the ordering of priority for different preemption
levels. Two or more job types may be combined at the
same priority level with a + between them, using no whitespace.
Comma-separated preemption levels are evaluated left to right,
with higher priority to the left.
The table below lists the six preemption levels. Note
that any level not specified in the 
.I preempt_prio 
list will be
ignored.
.RS
.IP express_queue 13
Jobs in the preemption (e.g. express) queue(s) preempt
other jobs.  See also 
.I preempt_queue_prio.
.IP starving_jobs 13
When a job becomes starving it can preempt other jobs.
.IP fairshare 13
When the entity owning a job exceeds its fairshare limit.
.IP queue_softlimits 13
Jobs which are over their queue soft limits
.IP server_softlimits 13
Jobs which are over their server soft limits
.IP normal_jobs 13
The preemption level into which a job falls if it does not
fit into any other specified level.
.RE
For example, the first line below states that starving jobs have
the highest priority, then normal jobs, and jobs whose entities
are over their fairshare limit are third highest. The second
example shows that starving jobs whose entities are also over
their fairshare limit are lower priority than normal jobs.
.RS
preempt_prio: "starving_jobs, normal_jobs, fairshare"
.br

.br
preempt_prio: "normal_jobs, starving_jobs+fairshare"
.RE
Format: Quoted list.
.br
Default: express_queue, normal_jobs
.RE

.IP preempt_queue_prio 13
Specifies the minimum queue priority required for a
queue to be classified as an express queue.
.br
Format: Integer
.br
Default: 150

.IP preempt_requeue 13
.B Deprecated. 
Add an R to 
.I preempt_order 
parameter.

.IP preempt_sort 13
Determines whether those jobs most eligible for preemption will be sorted
according to their start times. 
If set
to 
.I min_time_since_start, 
first job preempted will be that with
most recent start time. If not set (this parameter is commented out), 
job will be that with longest
running time. 
.br
Allowable values: 
.I min_time_since_start, 
or no setting. 
.br
Installed default: min_time_since_start

.IP preempt_starving 13
.B Deprecated. 
Add 
.I starving_jobs 
to
.I preempt_prio 
parameter.

.IP preempt_suspend 13
.B Deprecated. 
Add an 
.I S 
to 
.I preempt_order 
parameter.

.IP primetime_prefix 13
Queue names starting with this prefix are treated as
primetime queues. Jobs will only run in these queues during
primetime. Primetime and non-primetime are defined in the
holidays file.
.br
Format: String.
.br
Default: p_

.IP prime_exempt_anytime_queues 13
Determines whether anytime queues are controlled by
.I backfill_prime. 
If set to true, jobs in an anytime queue
will not be prevented from running across a primetime/nonprimetime
or non-primetime/primetime boundary. If set to
false, the jobs in an anytime queue may not cross this boundary,
except for the amount specified by their 
.I prime_spill 
setting.
See also 
.I backfill_prime, prime_spill.
.br
Format: Boolean.
.br
Default: False.

.IP prime_spill 13
.RS
Specifies the amount of time a job can spill over from nonprimetime
into primetime or from primetime into non-primetime.
This option is only meaningful if 
.I backfill_prime 
is true. Also note that this option can be separately specified for
prime- and non-primetime. See also 
.I backfill_prime, prime_exempt_anytime_queues.
.br
For example, the first setting below means that non-primetime
jobs can spill into primetime by 1 hour. However the second
setting means that jobs in either prime/non-prime can spill into
the other by 1 hour.
.RS
prime_spill: 1:00:00 prime
.br
prime_spill: 1:00:00 all
.RE
.br
Format: Time.
.br
Default: 00:00:00
.RE

.IP provision_policy
Specifies how vnodes are selected for provisioning.  Can be set by 
Manager only; readable by all.  Can be set to one of the following:

.RS
.IP "avoid_provision" 5

PBS first tries to satisfy the job's request from free vnodes that
already have the requested AOE instantiated.

If it cannot satisfy the job's request using vnodes that already have
the requested AOE instantiated, it does the following:
.RS 10
PBS uses the server's
.I node_sort_key 
to select the free vnodes that must be
provisioned in order to run the job, choosing from any free vnodes,
regardless of which AOE is instantiated on them.

Of the selected vnodes, PBS provisions any that do not have the
requested AOE instantiated on them.
.RE

.IP "aggressive_provision" 5
PBS selects vnodes to be provisioned without considering which AOE
is currently instantiated.

PBS uses the server's 
.I node_sort_key 
to select the vnodes on which to run the job,
choosing from any free vnodes, regardless of which AOE is instantiated
on them.  Of the selected vnodes, PBS provisions any that do not have
the requested AOE instantiated on them.
.LP

Format: string
.br
Default: "aggressive_provision"
.RE

.IP resources 13
.RS
Specifies those resources which are not to be over-allocated, 
or if Boolean, are to be honored, when
scheduling jobs. Vnode-level boolean resources are automatically
enforced and do not need to be listed here. Limits are set
by setting 
.I resources_available.resourceName 
on vnodes, queues, and the server. The Scheduler
will consider numeric (integer or float) items as consumable
resources and ensure that no more are assigned than are available
(e.g. ncpus or mem). Any string resources will be compared
using string comparisons (e.g. arch).
.br
If "host" is not added to the
resources line, then when the user submits a job requesting a specific
vnode in the following syntax:
.RS
qsub -l select=host=vnodeName
.RE
the job will run on any host.
.br
Format: String.
.br
Default: ncpus, mem, arch, host, vnode, aoe
.RE

.IP resource_unset_infinite 13
Resources in this list are treated as infinite if they are unset. 
Cannot be set differently
for primetime and non-primetime. 
.br
Example: resource_unset_infinite: vmem, foo_licenses
.br
Format: Comma-delimited list of resources.
.br
Default: empty list.

.IP round_robin 13
If set to true, the scheduler will consider one job from
the first queue, then one job from the second queue, and so on
in a circular fashion. If 
.I sort_queues 
is set to true, the
queues are ordered with the highest priority queue first. Each
scheduling cycle starts with the same highest-priority queue,
which will therefore get preferential treatment If
.I round_robin 
is set to false, the scheduler will consider jobs
according to the setting of the 
.I by_queue 
attribute.
When true, overrides the 
.I by_queue 
attribute.
.br
Format: Boolean.
.br
Default: false all

.IP server_dyn_res 13
Directs the Scheduler to replace the Server's
.I resources_available 
values with new values returned
by a site-specific external program. 
.br
Format: String.
.br
Default: unset

.IP smp_cluster_dist 13
.RS
.B Deprecated. 
Specifies how single-host jobs should be distributed to
all hosts of the complex. Options are: 
.RS
.IP pack 
Keep putting jobs onto one
host until it is full and then move on to the next.
.IP round_robin,
Put one job on each vnode in turn before
cycling back to the first one.
.IP lowest_load
Put the job on the lowest-loaded host. 
.RE
.br
Format: String.
.br
Default: pack all
.RE

.IP sort_by 13
.B Deprecated. 
Use 
.I job_sort_key.

.IP sort_queues 13
.B Deprecated.  
When set to true, queues are sorted so that the highest
priority queues are considered first. Queues are sorted by each
queue's 
.I priority 
attribute. The queues are sorted in a descending
fashion, that is, a queue with priority 6 comes before a
queue with priority 3. 

This is a prime option, which means it can be selectively
applied to primetime or non-primetime.
.br
Format: Boolean.
.br
Default: true ALL

.IP strict_fifo 13
.B Deprecated. 
Use 
.I strict_ordering.

.IP strict_ordering 13
Specifies that jobs must be run in the order determined
by whatever sorting parameters are being used. This means that
a job cannot be skipped due to resources required not being
available. 
If 
.I by_queue
is 
.I True, 
jobs are sorted at the queue level, not at the server level.
If 
.I by_queue
is 
.I False,
jobs are sorted at the server level.
If a job due to run next cannot run, no job will run, unless
backfilling is used, in which case jobs can be backfilled around the job that is
due to run next, if it is blocked. 
.br
Example line in PBS_HOME/sched_priv/sched_config:
.RS
strict_ordering: true ALL
.br
Format: Boolean.
.br
Default: False all
.RE

.IP sync_time 13
.B Deprecated.  
The amount of time between writing the fairshare usage
data to disk. Requires 
.I fair_share 
to be enabled.
.br
Format: Time.
.br
Default: 1:00:00

.IP unknown_shares 13
The number of shares for the unknown group. These
shares determine the portion of a resource to be allotted to that
group via fairshare. Requires 
.I fair_share 
to be enabled.
.br
Format: Integer.
.br
Default: The unknown group gets 0 shares unless set.

.SH FORMATS
.IP Boolean 10
Allowable values (case insensitive): True|T|Y|1|False|F|N|0

.IP Float 10
Allowable values: [+-] 0-9 [[0-9] ...][.][[0-9] ...]

.IP Long 10
Long integer.
Allowable values: 0-9 [[0-9] ...]

.IP Size 10
Number of bytes or words.  Expressed
in the form:
.RS 13
.I integer[suffix]
where 
.I suffix 
can be
.IP "\ b\ or\ \ w" 13
bytes or words.
.IP "kb\ or\ kw"
Kilo (2 to the 10th, or 1024) bytes or words.
.IP "mb\ or\ mw" 13
Mega (2 to the 20th, or 1,048,576) bytes or words.
.IP "gb\ or\ gw" 13
Giga (2 to the 30th, or 1,073,741,824) bytes or words.
.IP "tb\ or\ tw" 13
Tera (2 to the 40th, or 1024 gigabytes) bytes or words.
.IP "pb\ or\ pw" 13
Peta (2 to the 50th, or 1,048,576 gigabytes) bytes or words.

The size of a word is the word size on the execution host.
.RE

.IP String 10
Allowable values: [_a-zA-Z0-9][[-_a-zA-Z0-9[]#.] ...]
.br
(Leading underscore ("_"), alphabetic or numeric, 
followed by dash ("-"), underscore ("_"), alphabetic, numeric,
left bracket ("["), right bracket ("]"), hash ("#") or period ("."))

.IP Time 10
Time period.  Expressed
in seconds as an integer, or in the form:
.RS 13
.I [[hours:]minutes:]seconds[.milliseconds]
.RE
.LP

.SH FILES
$PBS_HOME/sched_priv is 
the default directory for configuration files.

$PBS_HOME/sched_priv/holidays is the holidays file.

.SH SIGNAL HANDLING

.IP SIGHUP
The scheduler will close and reopen its log file and reread the config file
if one exists.
.IP SIGALRM
If the scheduler exceeds the time limit, the Alarm
will cause the scheduler to attempt to core dump and restart itself.
.IP "SIGINT and SIGTERM"
Will result in an orderly shutdown of the scheduler.
.LP
All other signals have the default action installed.

.SH EXIT STATUS
Zero upon normal termination.

.SH SEE ALSO
The
.B PBS Professional Administrator's Guide, 
pbs_server(8B), pbs_mom(8B)
